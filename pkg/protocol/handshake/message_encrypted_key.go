package handshake

// MessageEncryptedKey is a DTLShps Handshake Message.
// This message is the symmetric key encrypted by the secret key
// HASH(PSK||nonce), after decryption, it is used to replace the
// symmetric key generated by ECDH negotiation.
type MessageEncryptedKey struct {
	EncryptedKey []byte
}

// Type returns the Handshake Type
func (m MessageEncryptedKey) Type() Type {
	return TypeEncryptedKey
}

// Marshal encodes the Handshake
func (m *MessageEncryptedKey) Marshal() ([]byte, error) {
	return append([]byte{byte(len(m.EncryptedKey))}, m.EncryptedKey...), nil
}

// Unmarshal populates the message from encoded data
func (m *MessageEncryptedKey) Unmarshal(data []byte) error {
	if encryptedKeyLength := int(data[0]); len(data) != encryptedKeyLength+1 {
		return errBufferTooSmall
	}

	m.EncryptedKey = append([]byte{}, data[1:]...)
	return nil
}
