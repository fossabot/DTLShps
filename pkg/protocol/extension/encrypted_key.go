package extension

import "encoding/binary"

const (
	encryptedKeyHeaderSize = 4
)

// EncryptedKey is a DTLShps Handshake Hello Message's extension.
// It is the symmetric key encrypted by the secret key
// HASH(PSK||nonce), after decryption, it is used to replace the
// symmetric key generated by ECDH negotiation.
type EncryptedKey struct {
	EncryptedKey []byte
}

// Type returns the Handshake Type
func (e EncryptedKey) TypeValue() TypeValue {
	return EncryptedKeyTypeValue
}

// Marshal encodes the Handshake
func (e *EncryptedKey) Marshal() ([]byte, error) {
	out := make([]byte, encryptedKeyHeaderSize)

	binary.BigEndian.PutUint16(out, uint16(e.TypeValue()))
	binary.BigEndian.PutUint16(out[2:], uint16(len(e.EncryptedKey))) // length
	out = append(out, e.EncryptedKey...)

	return out, nil
}

// Unmarshal populates the message from encoded data
func (e *EncryptedKey) Unmarshal(data []byte) error {
	if len(data) <= encryptedKeyHeaderSize {
		return errBufferTooSmall
	} else if TypeValue(binary.BigEndian.Uint16(data)) != e.TypeValue() {
		return errInvalidExtensionType
	}
	msgLength := int(binary.BigEndian.Uint16(data[2:]))
	if len(data)-encryptedKeyHeaderSize != msgLength {
		return errLengthMismatch
	}
	e.EncryptedKey = append([]byte{}, data[4:]...)
	return nil
}
